{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\idanb\\\\Desktop\\\\nettas-project\\\\Netas Project\\\\my-app\\\\src\\\\Pad.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Pad = props => {\n  _s();\n\n  let {\n    sound,\n    songPlay,\n    songPause,\n    playArray,\n    index\n  } = props;\n  const [songState, setSongState] = useState('play');\n  const [songPause2, setSongPause] = useState(false); //variable to check if component mounted to the DOM\n\n  const isMount = useRef(false);\n  useEffect(() => {\n    if (isMount.current === true) {\n      if (songPause === true && playArray[index] === true) {\n        sound.pause();\n      } else {\n        if (playArray[index] === true) {\n          sound.play();\n        }\n      }\n    } else {\n      isMount.current = true;\n    }\n  }, [songPause]);\n\n  const changePadState = state => {\n    if (state === 'play') {\n      let obj = {};\n      obj.index = index;\n      obj.sound = sound;\n\n      if (songPlay.length === 0) {\n        songPlay.push(obj);\n        sound.play();\n        playArray[index] = true;\n      } else {\n        songPlay.push(obj);\n      }\n\n      setSongState('stop');\n    } else {\n      sound.stop();\n      setSongPause(false);\n      playArray[index] = false; //looking for the item in the queue to remove him\n\n      for (let i = 0; i < songPlay.length; i++) {\n        if (songPlay[i].index === index) {\n          if (i !== songPlay.length - 1) {\n            songPlay[i + 1].sound.play();\n          }\n\n          songPlay = songPlay.splice(i, 1);\n          break;\n        }\n      }\n\n      setSongState('play');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    style: {\n      margin: '3rem',\n      padding: '1rem'\n    },\n    onClick: () => changePadState(songState),\n    children: \"shalom\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Pad, \"m5LQd41L+IZwcFrugLHkQvSDCw4=\");\n\n_c = Pad;\nexport default Pad;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pad\");","map":{"version":3,"sources":["C:/Users/idanb/Desktop/nettas-project/Netas Project/my-app/src/Pad.js"],"names":["useEffect","useState","useRef","Pad","props","sound","songPlay","songPause","playArray","index","songState","setSongState","songPause2","setSongPause","isMount","current","pause","play","changePadState","state","obj","length","push","stop","i","splice","margin","padding"],"mappings":";;;AACA,SAAQA,SAAR,EAAmBC,QAAnB,EAA4BC,MAA5B,QAAyC,OAAzC;;;AAGA,MAAMC,GAAG,GAAIC,KAAD,IAAW;AAAA;;AAEnB,MAAI;AAACC,IAAAA,KAAD;AAAOC,IAAAA,QAAP;AAAgBC,IAAAA,SAAhB;AAA0BC,IAAAA,SAA1B;AAAoCC,IAAAA;AAApC,MAA6CL,KAAjD;AAIA,QAAM,CAACM,SAAD,EAAaC,YAAb,IAA6BV,QAAQ,CAAC,MAAD,CAA3C;AACA,QAAM,CAACW,UAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,KAAD,CAA1C,CAPmB,CASnB;;AACA,QAAMa,OAAO,GAAGZ,MAAM,CAAC,KAAD,CAAtB;AAIAF,EAAAA,SAAS,CAAC,MAAI;AAEV,QAAGc,OAAO,CAACC,OAAR,KAAoB,IAAvB,EAA6B;AACzB,UAAIR,SAAS,KAAK,IAAd,IAAsBC,SAAS,CAACC,KAAD,CAAT,KAAqB,IAA/C,EAAqD;AAEjDJ,QAAAA,KAAK,CAACW,KAAN;AAGH,OALD,MAKO;AACH,YAAGR,SAAS,CAACC,KAAD,CAAT,KAAqB,IAAxB,EAA8B;AAC1BJ,UAAAA,KAAK,CAACY,IAAN;AACH;AACJ;AACJ,KAXD,MAYI;AACAH,MAAAA,OAAO,CAACC,OAAR,GAAkB,IAAlB;AACH;AACJ,GAjBQ,EAiBP,CAACR,SAAD,CAjBO,CAAT;;AAmBA,QAAMW,cAAc,GAAIC,KAAD,IAAW;AAG1B,QAAIA,KAAK,KAAK,MAAd,EAAsB;AAClB,UAAIC,GAAG,GAAG,EAAV;AACAA,MAAAA,GAAG,CAACX,KAAJ,GAAYA,KAAZ;AACAW,MAAAA,GAAG,CAACf,KAAJ,GAAYA,KAAZ;;AAGA,UAAGC,QAAQ,CAACe,MAAT,KAAoB,CAAvB,EAA0B;AAEtBf,QAAAA,QAAQ,CAACgB,IAAT,CAAcF,GAAd;AACAf,QAAAA,KAAK,CAACY,IAAN;AACAT,QAAAA,SAAS,CAACC,KAAD,CAAT,GAAmB,IAAnB;AAGH,OAPD,MAQI;AAEAH,QAAAA,QAAQ,CAACgB,IAAT,CAAcF,GAAd;AAEH;;AACDT,MAAAA,YAAY,CAAC,MAAD,CAAZ;AACH,KApBD,MAoBO;AAEHN,MAAAA,KAAK,CAACkB,IAAN;AACAV,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAL,MAAAA,SAAS,CAACC,KAAD,CAAT,GAAmB,KAAnB,CAJG,CAMH;;AACA,WAAI,IAAIe,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGlB,QAAQ,CAACe,MAA5B,EAAoCG,CAAC,EAArC,EAAwC;AACpC,YAAGlB,QAAQ,CAACkB,CAAD,CAAR,CAAYf,KAAZ,KAAsBA,KAAzB,EAA+B;AAC3B,cAAGe,CAAC,KAAKlB,QAAQ,CAACe,MAAT,GAAkB,CAA3B,EAA6B;AACzBf,YAAAA,QAAQ,CAACkB,CAAC,GAAC,CAAH,CAAR,CAAcnB,KAAd,CAAoBY,IAApB;AACH;;AACDX,UAAAA,QAAQ,GAAGA,QAAQ,CAACmB,MAAT,CAAgBD,CAAhB,EAAkB,CAAlB,CAAX;AAGA;AACH;AACJ;;AAEDb,MAAAA,YAAY,CAAC,MAAD,CAAZ;AACH;AAER,GA7CD;;AAoDA,sBAEI;AAAQ,IAAA,KAAK,EAAE;AAACe,MAAAA,MAAM,EAAC,MAAR;AAAeC,MAAAA,OAAO,EAAC;AAAvB,KAAf;AAA+C,IAAA,OAAO,EAAE,MAAMT,cAAc,CAACR,SAAD,CAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ;AASC,CA9FL;;GAAMP,G;;KAAAA,G;AAgGF,eAAeA,GAAf","sourcesContent":["\r\nimport {useEffect, useState,useRef} from 'react'\r\n\r\n\r\nconst Pad = (props) => {\r\n\r\n    let {sound,songPlay,songPause,playArray,index} = props;\r\n\r\n\r\n\r\n    const [songState , setSongState] = useState('play');\r\n    const [songPause2,setSongPause] = useState(false);\r\n\r\n    //variable to check if component mounted to the DOM\r\n    const isMount = useRef(false);\r\n\r\n\r\n\r\n    useEffect(()=>{\r\n\r\n        if(isMount.current === true) {\r\n            if (songPause === true && playArray[index] === true) {\r\n\r\n                sound.pause();\r\n\r\n\r\n            } else {\r\n                if(playArray[index] === true) {\r\n                    sound.play();\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            isMount.current = true;\r\n        }\r\n    },[songPause])\r\n\r\n    const changePadState = (state) => {\r\n\r\n\r\n            if (state === 'play') {\r\n                let obj = {};\r\n                obj.index = index;\r\n                obj.sound = sound;\r\n\r\n\r\n                if(songPlay.length === 0) {\r\n\r\n                    songPlay.push(obj);\r\n                    sound.play();\r\n                    playArray[index] = true;\r\n\r\n\r\n                }\r\n                else{\r\n\r\n                    songPlay.push(obj);\r\n\r\n                }\r\n                setSongState('stop')\r\n            } else {\r\n\r\n                sound.stop();\r\n                setSongPause(false);\r\n                playArray[index] = false;\r\n\r\n                //looking for the item in the queue to remove him\r\n                for(let i = 0; i < songPlay.length; i++){\r\n                    if(songPlay[i].index === index){\r\n                        if(i !== songPlay.length - 1){\r\n                            songPlay[i+1].sound.play();\r\n                        }\r\n                        songPlay = songPlay.splice(i,1);\r\n\r\n\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                setSongState('play');\r\n            }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return(\r\n\r\n        <button style={{margin:'3rem',padding:'1rem'}} onClick={() => changePadState(songState)}>\r\n            shalom\r\n\r\n\r\n        </button>\r\n    )\r\n\r\n    }\r\n\r\n    export default Pad;"]},"metadata":{},"sourceType":"module"}