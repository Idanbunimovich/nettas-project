{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\idanb\\\\Desktop\\\\Netas Project\\\\my-app\\\\src\\\\Pad.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Pad = props => {\n  _s();\n\n  let {\n    soundElement,\n    songPlay,\n    songPause,\n    playArray,\n    index\n  } = props;\n  let {\n    sound,\n    play\n  } = soundElement;\n  const [songState, setSongState] = useState('play');\n  const [songPause2, setSongPause] = useState(false); //variable to check if component mounted to the DOM\n\n  const isMount = useRef(false);\n  useEffect(() => {\n    if (isMount.current === true) {\n      if (songPause === true && playArray[index] === true) {\n        sound.pause();\n      } else {\n        if (playArray[index] === true) {\n          sound.play();\n        }\n      }\n    } else {\n      isMount.current = true;\n    }\n  }, [songPause]);\n\n  const changePadState = state => {\n    if (state === 'play') {\n      if (songPlay.length === 0) {\n        songPlay.push(sound);\n        sound.play();\n        playArray[index] = true;\n      } else {\n        songPlay.push(sound);\n      }\n\n      setSongState('stop');\n    } else {\n      sound.stop();\n      setSongPause(false);\n      playArray[index] = false;\n      songPlay.shift();\n      setSongState('play');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    style: {\n      margin: '3rem',\n      padding: '1rem'\n    },\n    onClick: () => changePadState(songState),\n    children: \"shalom\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Pad, \"m5LQd41L+IZwcFrugLHkQvSDCw4=\");\n\n_c = Pad;\nexport default Pad;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pad\");","map":{"version":3,"sources":["C:/Users/idanb/Desktop/Netas Project/my-app/src/Pad.js"],"names":["useEffect","useState","useRef","Pad","props","soundElement","songPlay","songPause","playArray","index","sound","play","songState","setSongState","songPause2","setSongPause","isMount","current","pause","changePadState","state","length","push","stop","shift","margin","padding"],"mappings":";;;AACA,SAAQA,SAAR,EAAmBC,QAAnB,EAA4BC,MAA5B,QAAyC,OAAzC;;;AAGA,MAAMC,GAAG,GAAIC,KAAD,IAAW;AAAA;;AAEnB,MAAI;AAACC,IAAAA,YAAD;AAAcC,IAAAA,QAAd;AAAuBC,IAAAA,SAAvB;AAAiCC,IAAAA,SAAjC;AAA2CC,IAAAA;AAA3C,MAAoDL,KAAxD;AACA,MAAI;AAACM,IAAAA,KAAD;AAAOC,IAAAA;AAAP,MAAeN,YAAnB;AAGA,QAAM,CAACO,SAAD,EAAaC,YAAb,IAA6BZ,QAAQ,CAAC,MAAD,CAA3C;AACA,QAAM,CAACa,UAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,KAAD,CAA1C,CAPmB,CASnB;;AACA,QAAMe,OAAO,GAAGd,MAAM,CAAC,KAAD,CAAtB;AAIAF,EAAAA,SAAS,CAAC,MAAI;AAEV,QAAGgB,OAAO,CAACC,OAAR,KAAoB,IAAvB,EAA6B;AACzB,UAAIV,SAAS,KAAK,IAAd,IAAsBC,SAAS,CAACC,KAAD,CAAT,KAAqB,IAA/C,EAAqD;AAEjDC,QAAAA,KAAK,CAACQ,KAAN;AAGH,OALD,MAKO;AACH,YAAGV,SAAS,CAACC,KAAD,CAAT,KAAqB,IAAxB,EAA8B;AAC1BC,UAAAA,KAAK,CAACC,IAAN;AACH;AACJ;AACJ,KAXD,MAYI;AACAK,MAAAA,OAAO,CAACC,OAAR,GAAkB,IAAlB;AACH;AACJ,GAjBQ,EAiBP,CAACV,SAAD,CAjBO,CAAT;;AAmBA,QAAMY,cAAc,GAAIC,KAAD,IAAW;AAG1B,QAAIA,KAAK,KAAK,MAAd,EAAsB;AAGlB,UAAGd,QAAQ,CAACe,MAAT,KAAoB,CAAvB,EAA0B;AAEtBf,QAAAA,QAAQ,CAACgB,IAAT,CAAcZ,KAAd;AACAA,QAAAA,KAAK,CAACC,IAAN;AACAH,QAAAA,SAAS,CAACC,KAAD,CAAT,GAAmB,IAAnB;AAGH,OAPD,MAQI;AAEAH,QAAAA,QAAQ,CAACgB,IAAT,CAAcZ,KAAd;AAEH;;AACDG,MAAAA,YAAY,CAAC,MAAD,CAAZ;AACH,KAjBD,MAiBO;AAEHH,MAAAA,KAAK,CAACa,IAAN;AACAR,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAP,MAAAA,SAAS,CAACC,KAAD,CAAT,GAAmB,KAAnB;AACAH,MAAAA,QAAQ,CAACkB,KAAT;AACAX,MAAAA,YAAY,CAAC,MAAD,CAAZ;AACH;AAER,GA7BD;;AAoCA,sBAEI;AAAQ,IAAA,KAAK,EAAE;AAACY,MAAAA,MAAM,EAAC,MAAR;AAAeC,MAAAA,OAAO,EAAC;AAAvB,KAAf;AAA+C,IAAA,OAAO,EAAE,MAAMP,cAAc,CAACP,SAAD,CAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ;AASC,CA9EL;;GAAMT,G;;KAAAA,G;AAgFF,eAAeA,GAAf","sourcesContent":["\r\nimport {useEffect, useState,useRef} from 'react'\r\n\r\n\r\nconst Pad = (props) => {\r\n\r\n    let {soundElement,songPlay,songPause,playArray,index} = props;\r\n    let {sound,play} = soundElement;\r\n\r\n\r\n    const [songState , setSongState] = useState('play');\r\n    const [songPause2,setSongPause] = useState(false);\r\n\r\n    //variable to check if component mounted to the DOM\r\n    const isMount = useRef(false);\r\n\r\n\r\n\r\n    useEffect(()=>{\r\n\r\n        if(isMount.current === true) {\r\n            if (songPause === true && playArray[index] === true) {\r\n\r\n                sound.pause();\r\n\r\n\r\n            } else {\r\n                if(playArray[index] === true) {\r\n                    sound.play();\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            isMount.current = true;\r\n        }\r\n    },[songPause])\r\n\r\n    const changePadState = (state) => {\r\n\r\n\r\n            if (state === 'play') {\r\n\r\n\r\n                if(songPlay.length === 0) {\r\n\r\n                    songPlay.push(sound);\r\n                    sound.play();\r\n                    playArray[index] = true;\r\n\r\n\r\n                }\r\n                else{\r\n\r\n                    songPlay.push(sound);\r\n\r\n                }\r\n                setSongState('stop')\r\n            } else {\r\n\r\n                sound.stop();\r\n                setSongPause(false);\r\n                playArray[index] = false;\r\n                songPlay.shift();\r\n                setSongState('play');\r\n            }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return(\r\n\r\n        <button style={{margin:'3rem',padding:'1rem'}} onClick={() => changePadState(songState)}>\r\n            shalom\r\n\r\n\r\n        </button>\r\n    )\r\n\r\n    }\r\n\r\n    export default Pad;"]},"metadata":{},"sourceType":"module"}